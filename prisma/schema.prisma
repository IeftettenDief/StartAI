// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------- ENUMS -------------------
enum AccountType {
  freemium
  premium
  admin
}

enum StartupUserRole {
  owner
}

enum StepType {
  check
  upload
}

enum StepStatus {
  open
  in_progress
  done
}

enum SubscriptionPlan {
  freemium
  premium
}

enum SubscriptionStatus {
  active
  canceled
  past_due
}

enum PaymentStatus {
  succeeded
  failed
  pending
}

enum role {
  admin
  user
}

enum OnboardingStep {
  USER_PROFILE      // Stap 1: Username kiezen
  STARTUP_INFO      // Stap 2: Bedrijfsnaam, email
  FIRST_PROMPT      // Stap 3: Eerste prompt
  COMPLETED
}

// ------------------- NEXTAUTH MODELS (GEBRUIK STANDAARD NAMEN) -------------------

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String      @unique
  emailVerified  DateTime?    @map("email_verified")
  image          String?
  role            role        @default(user)
  username       String?      @unique
  account_type   AccountType  @default(freemium)
  onboarding_step  OnboardingStep @default(USER_PROFILE)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt

  startupUsers   StartupUser[]
  prompts        Prompt[]
  stepsCompleted Step[]       @relation("StepCompletedByUser")
  subscriptions  Subscription[]
  
  @@map("users")
}
/**
model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
} */

model VerificationToken {
  id         String @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ------------------- BUSINESS MODELS -------------------

model StartupUser {
  id         Int             @id @default(autoincrement())
  startup_id Int
  user_id    String  
  email      String
  role       StartupUserRole @default(owner)
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt

  user      User     @relation(fields: [user_id], references: [id])
  startup   StartUp  @relation(fields: [startup_id], references: [id])
  
  @@map("startup_users")
}

model StartUp {
  id                 Int           @id @default(autoincrement())
  name               String
  email              String
  current_level_id   Int           @default(1)
  current_experience Int           @default(0)
  created_at         DateTime      @default(now())
  updated_at         DateTime      @updatedAt

  startupUsers       StartupUser[]
  prompts            Prompt[]
  steps              Step[]
  
  @@map("startups")
}

model Prompt {
  id         Int      @id @default(autoincrement())
  startup_id Int
  user_id    String  
  prompt     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  startup    StartUp @relation(fields: [startup_id], references: [id])
  user       User    @relation(fields: [user_id], references: [id])
  
  @@map("prompts")
}

model Level {
  id                Int       @id @default(autoincrement())
  level_number      Int
  title             String
  experience_needed Int
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  steps             Step[]
  
  @@map("levels")
}

model Step {
  id                  Int        @id @default(autoincrement())
  startup_id          Int
  level_id            Int
  title               String
  explanation         String
  type                StepType
  status              StepStatus  @default(open)
  completed_by_user_id String?       
  completed_at        DateTime?
  created_at          DateTime    @default(now())
  updated_at          DateTime    @updatedAt

  startup   StartUp @relation(fields: [startup_id], references: [id])
  level     Level   @relation(fields: [level_id], references: [id])
  completed_by_user User? @relation("StepCompletedByUser", fields: [completed_by_user_id], references: [id])
  
  @@map("steps")
}

// ------------------- Subscriptions & Payments -------------------
model Subscription {
  id         Int               @id @default(autoincrement())
  user_id    String  
  plan       SubscriptionPlan
  status     SubscriptionStatus
  start_date DateTime          @default(now())
  end_date   DateTime?
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  user       User              @relation(fields: [user_id], references: [id])
  payments   Payment[]
  
  @@map("subscriptions")
}

model Payment {
  id              Int             @id @default(autoincrement())
  subscription_id Int
  amount          Float
  currency        String          @default("USD")
  status          PaymentStatus
  payment_method  String?
  transaction_id  String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  subscription    Subscription    @relation(fields: [subscription_id], references: [id])
  
  @@map("payments")
}